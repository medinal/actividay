require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ActivitiesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Activity. As you add validations to Activity, be sure to
  # adjust the attributes here as well.


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ActivitiesController. Be sure to keep this updated too.
  describe "anonymous user" do
    before :each do
      login_with nil
    end

    it "should be redirected to signing" do
      get :index
      expect( response ).to redirect_to( new_user_session_path )
    end
  end

  it "should let a user see all the posts" do
    login_with create( :user )
    get :index
    expect( response ).to render_template( :index )
  end

  describe "GET #index" do
    it "assigns all activities as @activities" do
      activity = create( :activity )
      login_with create( :user )
      get :index, params: {}
      expect(assigns(:activities)).to eq([activity])
    end
  end

  describe "GET #show" do
    it "assigns the requested activity as @activity" do
      activity = create( :activity )
      login_with create( :user )
      get :show, params: {id: activity.to_param}
      expect(assigns(:activity)).to eq(activity)
    end
  end

  describe "set activities" do
    it "redirects to activities path with invalid params" do
      activity = create( :activity )
      login_with create( :user )
      get :show, params: {id: "goat"}
      expect( response ).to redirect_to( activities_path )
    end
  end

end
